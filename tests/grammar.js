// Generated automatically by nearley, version 2.13.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

function node(type, types, children) {
  return {
    "@type": type, 
    "types": types, 
    "children": children.filter(child => child)
  }; 
}
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "S", "symbols": ["S_num_sing"], "postprocess": (args) => node("S", {}, args)},
    {"name": "S", "symbols": ["S_num_plur"], "postprocess": (args) => node("S", {}, args)},
    {"name": "S_num_sing", "symbols": ["NP_num_sing_gen_male_case_pnom", "_", "VP__num_sing_fin_p"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing", "symbols": ["NP_num_sing_gen_fem_case_pnom", "_", "VP__num_sing_fin_p"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing", "symbols": ["NP_num_sing_gen_nhum_case_pnom", "_", "VP__num_sing_fin_p"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_plur", "symbols": ["NP_num_plur_gen_male_case_pnom", "_", "VP__num_plur_fin_p"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur", "symbols": ["NP_num_plur_gen_fem_case_pnom", "_", "VP__num_plur_fin_p"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur", "symbols": ["NP_num_plur_gen_nhum_case_pnom", "_", "VP__num_plur_fin_p"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "VP__num_sing_fin_p", "symbols": ["VP_num_sing_fin_p"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+"}, args)},
    {"name": "VP__num_plur_fin_p", "symbols": ["VP_num_plur_fin_p"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+"}, args)},
    {"name": "VP_num_sing_fin_p", "symbols": ["V_num_sing_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+"}, args)},
    {"name": "VP_num_sing_fin_n", "symbols": ["V_num_sing_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-"}, args)},
    {"name": "VP_num_plur_fin_p", "symbols": ["V_num_plur_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+"}, args)},
    {"name": "VP_num_plur_fin_n", "symbols": ["V_num_plur_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom", "symbols": ["PN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom", "symbols": ["PN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom", "symbols": ["PN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom", "symbols": ["PN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom", "symbols": ["PN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom", "symbols": ["DET_num_sing", "_", "N_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom", "symbols": ["PN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom", "symbols": ["PN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom", "symbols": ["PN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom", "symbols": ["PN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom", "symbols": ["PN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom", "symbols": ["PN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom", "symbols": ["DET_num_plur", "_", "N_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom", "symbols": ["PN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom"}, args)},
    {"name": "DET_num_sing", "symbols": [{"literal":"a"}], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$string$1", "symbols": [{"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$string$1"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$string$2", "symbols": [{"literal":"t"}, {"literal":"h"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$string$2"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$string$3", "symbols": [{"literal":"s"}, {"literal":"o"}, {"literal":"m"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$string$3"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "PN_num_sing_gen_male$string$1", "symbols": [{"literal":"J"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$string$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$string$2", "symbols": [{"literal":"J"}, {"literal":"o"}, {"literal":"h"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$string$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_fem$string$1", "symbols": [{"literal":"M"}, {"literal":"a"}, {"literal":"r"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PN_num_sing_gen_fem", "symbols": ["PN_num_sing_gen_fem$string$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing_gen_fem$string$2", "symbols": [{"literal":"A"}, {"literal":"n"}, {"literal":"n"}, {"literal":"a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PN_num_sing_gen_fem", "symbols": ["PN_num_sing_gen_fem$string$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_male$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"b"}, {"literal":"r"}, {"literal":"o"}, {"literal":"k"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male$string$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_male$string$2", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male$string$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_fem$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"b"}, {"literal":"r"}, {"literal":"o"}, {"literal":"k"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$string$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem$string$2", "symbols": [{"literal":"w"}, {"literal":"o"}, {"literal":"m"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$string$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem$string$3", "symbols": [{"literal":"w"}, {"literal":"i"}, {"literal":"d"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$string$3"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_nhum$string$1", "symbols": [{"literal":"b"}, {"literal":"o"}, {"literal":"o"}, {"literal":"k"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$string$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$string$2", "symbols": [{"literal":"d"}, {"literal":"o"}, {"literal":"n"}, {"literal":"k"}, {"literal":"e"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$string$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$string$3", "symbols": [{"literal":"h"}, {"literal":"o"}, {"literal":"r"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$string$3"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$string$1"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$string$2", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"i"}, {"literal":"n"}, {"literal":"k"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$string$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$string$1"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$string$2", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"i"}, {"literal":"n"}, {"literal":"k"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$string$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$string$1"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$string$2", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"i"}, {"literal":"n"}, {"literal":"k"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$string$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$string$1"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$string$2", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"i"}, {"literal":"n"}, {"literal":"k"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$string$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)}
]
  , ParserStart: "S"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
