// Generated automatically by nearley, version 2.13.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

function node(type, types, children) {
  // console.log(type + ": " + JSON.stringify(types) + " => ");
  return {
    "@type": type, 
    "types": types, 
    "children": children
      .filter(child => child != null)
      .filter(child => child != '.')
  }; 
}
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "Discourse$ebnf$1$subexpression$1", "symbols": ["_", "Sentence", "_"], "postprocess": (args) => args[1]},
    {"name": "Discourse$ebnf$1", "symbols": ["Discourse$ebnf$1$subexpression$1"]},
    {"name": "Discourse$ebnf$1$subexpression$2", "symbols": ["_", "Sentence", "_"], "postprocess": (args) => args[1]},
    {"name": "Discourse$ebnf$1", "symbols": ["Discourse$ebnf$1", "Discourse$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Discourse", "symbols": ["Discourse$ebnf$1"], "postprocess": (args) => node("Discourse", {}, ...args)},
    {"name": "FULLNAME$ebnf$1$subexpression$1", "symbols": ["NAME", "_"]},
    {"name": "FULLNAME$ebnf$1", "symbols": ["FULLNAME$ebnf$1$subexpression$1"]},
    {"name": "FULLNAME$ebnf$1$subexpression$2", "symbols": ["NAME", "_"]},
    {"name": "FULLNAME$ebnf$1", "symbols": ["FULLNAME$ebnf$1", "FULLNAME$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "FULLNAME", "symbols": ["FULLNAME$ebnf$1"], "postprocess": ([args]) => args.map(name => name[0]).join(" ")},
    {"name": "NAME$ebnf$1", "symbols": [/[A-Z]/]},
    {"name": "NAME$ebnf$1", "symbols": ["NAME$ebnf$1", /[A-Z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "NAME$ebnf$2", "symbols": [/[a-z]/]},
    {"name": "NAME$ebnf$2", "symbols": ["NAME$ebnf$2", /[a-z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "NAME", "symbols": ["NAME$ebnf$1", "NAME$ebnf$2"], "postprocess": ([a, b]) => a.join("") + b.join("")},
    {"name": "Sentence", "symbols": ["S_num_sing", "_", {"literal":"."}], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence", "symbols": ["S_num_plur", "_", {"literal":"."}], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$2", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$1", "_", "NP_num_sing_case_pnom_gap_sing", "__", "VP__num_sing_fin_p_gap_n", "_", "Sentence$subexpression$2"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$3", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$4", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$3", "_", "NP_num_plur_case_pnom_gap_plur", "__", "VP__num_plur_fin_p_gap_n", "_", "Sentence$subexpression$4"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$5", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$6", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$5", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_sing", "_", "Sentence$subexpression$6"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$7", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$8", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$7", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_sing", "_", "Sentence$subexpression$8"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$9", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$10", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$9", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_plur", "_", "Sentence$subexpression$10"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$11", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$12", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$11", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_plur", "_", "Sentence$subexpression$12"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$13", "symbols": [/[iI]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$14", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$13", "__", "NP_num_sing_case_pnom_gap_n", "__", "ADJ", "_", "Sentence$subexpression$14"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "S_num_sing", "symbols": ["NP__num_sing_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$1", "symbols": [/[iI]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing$subexpression$2", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing$subexpression$1", "__", "S_num_sing", "__", "S_num_sing$subexpression$2", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing", "__", "S_num_sing$subexpression$3", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing", "__", "S_num_sing$subexpression$4", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_plur", "symbols": ["NP__num_plur_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$1", "symbols": [/[iI]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur$subexpression$2", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur$subexpression$1", "__", "S_num_plur", "__", "S_num_plur$subexpression$2", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur", "__", "S_num_plur$subexpression$3", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur", "__", "S_num_plur$subexpression$4", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_case_pnom_gap_n", "WS_gap_n", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_plur_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_case_pnom_gap_n", "WS_gap_n", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_sing_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "VP__num_sing_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_n", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_n$subexpression$1", "__", "VP_num_sing_fin_n_gap_n"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_sing_fin_p_gap_n", "symbols": ["VP_num_sing_fin_p_gap_n"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_sing_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_sing", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_sing$subexpression$1", "__", "VP_num_sing_fin_n_gap_sing"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_sing_fin_p_gap_sing", "symbols": ["VP_num_sing_fin_p_gap_sing"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_sing_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_plur", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_plur$subexpression$1", "__", "VP_num_sing_fin_n_gap_plur"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_sing_fin_p_gap_plur", "symbols": ["VP_num_sing_fin_p_gap_plur"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_plur_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_n", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_n$subexpression$1", "__", "VP_num_plur_fin_n_gap_n"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_plur_fin_p_gap_n", "symbols": ["VP_num_plur_fin_p_gap_n"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_plur_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_sing", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_sing$subexpression$1", "__", "VP_num_plur_fin_n_gap_sing"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_plur_fin_p_gap_sing", "symbols": ["VP_num_plur_fin_p_gap_sing"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_plur_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_plur", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_plur$subexpression$1", "__", "VP_num_plur_fin_n_gap_plur"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_plur_fin_p_gap_plur", "symbols": ["VP_num_plur_fin_p_gap_plur"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_pnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["VP_num_sing_fin_p_gap_sing", "__", "VP_num_sing_fin_p_gap_sing$subexpression$2", "__", "VP_num_sing_fin_p_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_pnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["VP_num_sing_fin_p_gap_plur", "__", "VP_num_sing_fin_p_gap_plur$subexpression$2", "__", "VP_num_sing_fin_p_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_pnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["VP_num_sing_fin_n_gap_sing", "__", "VP_num_sing_fin_n_gap_sing$subexpression$2", "__", "VP_num_sing_fin_n_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_pnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["VP_num_sing_fin_n_gap_plur", "__", "VP_num_sing_fin_n_gap_plur$subexpression$2", "__", "VP_num_sing_fin_n_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_pnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["VP_num_plur_fin_p_gap_sing", "__", "VP_num_plur_fin_p_gap_sing$subexpression$2", "__", "VP_num_plur_fin_p_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_pnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["VP_num_plur_fin_p_gap_plur", "__", "VP_num_plur_fin_p_gap_plur$subexpression$2", "__", "VP_num_plur_fin_p_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_pnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["VP_num_plur_fin_n_gap_sing", "__", "VP_num_plur_fin_n_gap_sing$subexpression$2", "__", "VP_num_plur_fin_n_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_pnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["VP_num_plur_fin_n_gap_plur", "__", "VP_num_plur_fin_n_gap_plur$subexpression$2", "__", "VP_num_plur_fin_n_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["VP_num_sing_fin_p_gap_n", "__", "VP_num_sing_fin_p_gap_n$subexpression$2", "__", "VP_num_sing_fin_p_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["VP_num_sing_fin_n_gap_n", "__", "VP_num_sing_fin_n_gap_n$subexpression$2", "__", "VP_num_sing_fin_n_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["VP_num_plur_fin_p_gap_n", "__", "VP_num_plur_fin_p_gap_n$subexpression$2", "__", "VP_num_plur_fin_p_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_sing_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "PP"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["VP_num_plur_fin_n_gap_n", "__", "VP_num_plur_fin_n_gap_n$subexpression$2", "__", "VP_num_plur_fin_n_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "NP_num_sing_case_pnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","case":"+nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_case_nnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","case":"-nom","gap":"sing"}, args)},
    {"name": "NP_num_plur_case_pnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","case":"+nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_case_nnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","case":"-nom","gap":"plur"}, args)},
    {"name": "NP_num_sing_case_pnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_pnom_gap_n", "symbols": ["PN_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_pnom_gap_n", "symbols": ["PRO_num_sing_case_pnom"], "postprocess": (args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_nnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_nnom_gap_n", "symbols": ["PN_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_nnom_gap_n", "symbols": ["PRO_num_sing_case_nnom"], "postprocess": (args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing"], "postprocess": (args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_pnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_pnom_gap_n", "symbols": ["PN_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_pnom_gap_n", "symbols": ["PRO_num_plur_case_pnom"], "postprocess": (args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_nnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_nnom_gap_n", "symbols": ["PN_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_nnom_gap_n", "symbols": ["PRO_num_plur_case_nnom"], "postprocess": (args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur"], "postprocess": (args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args)},
    {"name": "NP__num_plur_case_pnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_sing_case_pnom_gap_n", "__", "NP__num_plur_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_sing_case_pnom_gap_n", "__", "NP__num_plur_case_pnom_gap_n$subexpression$2", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_plur_case_pnom_gap_n", "__", "NP__num_plur_case_pnom_gap_n$subexpression$3", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_plur_case_pnom_gap_n", "__", "NP__num_plur_case_pnom_gap_n$subexpression$4", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_pnom_gap_n", "symbols": ["NP_num_plur_case_pnom_gap_n", "__", "NP__num_plur_case_pnom_gap_n$subexpression$5", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_sing_case_nnom_gap_n", "__", "NP__num_plur_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_sing_case_nnom_gap_n", "__", "NP__num_plur_case_nnom_gap_n$subexpression$2", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_plur_case_nnom_gap_n", "__", "NP__num_plur_case_nnom_gap_n$subexpression$3", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_plur_case_nnom_gap_n", "__", "NP__num_plur_case_nnom_gap_n$subexpression$4", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_case_nnom_gap_n", "symbols": ["NP_num_plur_case_nnom_gap_n", "__", "NP__num_plur_case_nnom_gap_n$subexpression$5", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_case_pnom_gap_n", "symbols": ["NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_case_pnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_case_pnom_gap_n", "symbols": ["NP_num_sing_case_pnom_gap_n", "__", "NP__num_sing_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_case_pnom_gap_sing", "symbols": ["NP_num_sing_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_case_pnom_gap_plur", "symbols": ["NP_num_sing_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_case_nnom_gap_n", "symbols": ["NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_case_nnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_case_nnom_gap_n", "symbols": ["NP_num_sing_case_nnom_gap_n", "__", "NP__num_sing_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_case_nnom_gap_sing", "symbols": ["NP_num_sing_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_case_nnom_gap_plur", "symbols": ["NP_num_sing_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_sing", "symbols": ["NP_num_plur_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_case_pnom_gap_plur", "symbols": ["NP_num_plur_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_sing", "symbols": ["NP_num_plur_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_case_nnom_gap_plur", "symbols": ["NP_num_plur_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "N_num_sing", "symbols": ["N_num_sing", "__", "RC_num_sing"], "postprocess": (args) => node("N", {"num":"sing"}, args)},
    {"name": "N_num_sing", "symbols": ["ADJ", "__", "N_num_sing"], "postprocess": (args) => node("N", {"num":"sing"}, args)},
    {"name": "N_num_sing", "symbols": ["N_num_sing", "__", "PP"], "postprocess": (args) => node("N", {"num":"sing"}, args)},
    {"name": "N_num_sing$subexpression$1", "symbols": [/[sS]/, /[tT]/, /[oO]/, /[cC]/, /[kK]/, /[bB]/, /[rR]/, /[oO]/, /[kK]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing$subexpression$2", "symbols": [/[mM]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing$subexpression$3", "symbols": [/[eE]/, /[nN]/, /[gG]/, /[iI]/, /[nN]/, /[eE]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$3"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing$subexpression$4", "symbols": [/[bB]/, /[rR]/, /[aA]/, /[zZ]/, /[iI]/, /[lL]/, /[iI]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$4"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing$subexpression$5", "symbols": [/[sS]/, /[tT]/, /[oO]/, /[cC]/, /[kK]/, /[bB]/, /[rR]/, /[oO]/, /[kK]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$5"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing$subexpression$6", "symbols": [/[wW]/, /[oO]/, /[mM]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$6"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing$subexpression$7", "symbols": [/[wW]/, /[iI]/, /[dD]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$7"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing$subexpression$8", "symbols": [/[eE]/, /[nN]/, /[gG]/, /[iI]/, /[nN]/, /[eE]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$8"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing$subexpression$9", "symbols": [/[bB]/, /[rR]/, /[aA]/, /[zZ]/, /[iI]/, /[lL]/, /[iI]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$9"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing$subexpression$10", "symbols": [/[bB]/, /[oO]/, /[oO]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$10"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing$subexpression$11", "symbols": [/[dD]/, /[oO]/, /[nN]/, /[kK]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$11"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing$subexpression$12", "symbols": [/[hH]/, /[oO]/, /[rR]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$12"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing$subexpression$13", "symbols": [/[pP]/, /[oO]/, /[rR]/, /[sS]/, /[cC]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing", "symbols": ["N_num_sing$subexpression$13"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_plur", "symbols": ["N_num_plur", "__", "RC_num_plur"], "postprocess": (args) => node("N", {"num":"plur"}, args)},
    {"name": "N_num_plur", "symbols": ["ADJ", "__", "N_num_plur"], "postprocess": (args) => node("N", {"num":"plur"}, args)},
    {"name": "N_num_plur", "symbols": ["N_num_plur", "__", "PP"], "postprocess": (args) => node("N", {"num":"plur"}, args)},
    {"name": "RC_num_sing", "symbols": ["RPRO_num_sing", "__", "S_num_sing_gap_sing"], "postprocess": (args) => node("RC", {"num":"sing"}, args)},
    {"name": "RC_num_plur", "symbols": ["RPRO_num_plur", "__", "S_num_plur_gap_plur"], "postprocess": (args) => node("RC", {"num":"plur"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p", "__", "V_num_sing_fin_p_trans_p$subexpression$1", "__", "V_num_sing_fin_p_trans_p"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n", "__", "V_num_sing_fin_p_trans_n$subexpression$1", "__", "V_num_sing_fin_p_trans_n"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p", "__", "V_num_sing_fin_n_trans_p$subexpression$1", "__", "V_num_sing_fin_n_trans_p"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n", "__", "V_num_sing_fin_n_trans_n$subexpression$1", "__", "V_num_sing_fin_n_trans_n"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p", "__", "V_num_plur_fin_p_trans_p$subexpression$1", "__", "V_num_plur_fin_p_trans_p"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n", "__", "V_num_plur_fin_p_trans_n$subexpression$1", "__", "V_num_plur_fin_p_trans_n"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p", "__", "V_num_plur_fin_n_trans_p$subexpression$1", "__", "V_num_plur_fin_n_trans_p"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n", "__", "V_num_plur_fin_n_trans_n$subexpression$1", "__", "V_num_plur_fin_n_trans_n"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$1", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_sing", "DET_num_sing_rn_p$subexpression$1"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$2", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_plur", "DET_num_sing_rn_p$subexpression$2"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "DET_num_sing$subexpression$1", "symbols": [/[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$1"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$2", "symbols": [/[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$2"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$3", "symbols": [/[eE]/, /[vV]/, /[eE]/, /[rR]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$3"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$4", "symbols": [/[tT]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$4"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$5", "symbols": [/[sS]/, /[oO]/, /[mM]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$5"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "PRO_num_sing_case_pnom$subexpression$1", "symbols": [/[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_pnom", "symbols": ["PRO_num_sing_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","case":"+nom","gen":"male"}, args)},
    {"name": "PRO_num_sing_case_pnom$subexpression$2", "symbols": [/[sS]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_pnom", "symbols": ["PRO_num_sing_case_pnom$subexpression$2"], "postprocess": (args) => node("PRO", {"num":"sing","case":"+nom","gen":"fem"}, args)},
    {"name": "PRO_num_sing_case_pnom$subexpression$3", "symbols": [/[iI]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_pnom", "symbols": ["PRO_num_sing_case_pnom$subexpression$3"], "postprocess": (args) => node("PRO", {"num":"sing","case":"+nom","gen":"-hum"}, args)},
    {"name": "PRO_num_sing_case_nnom$subexpression$1", "symbols": [/[hH]/, /[iI]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_nnom", "symbols": ["PRO_num_sing_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","case":"-nom","gen":"male"}, args)},
    {"name": "PRO_num_sing_case_nnom$subexpression$2", "symbols": [/[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_nnom", "symbols": ["PRO_num_sing_case_nnom$subexpression$2"], "postprocess": (args) => node("PRO", {"num":"sing","case":"-nom","gen":"fem"}, args)},
    {"name": "PRO_num_sing_case_nnom$subexpression$3", "symbols": [/[iI]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_case_nnom", "symbols": ["PRO_num_sing_case_nnom$subexpression$3"], "postprocess": (args) => node("PRO", {"num":"sing","case":"-nom","gen":"-hum"}, args)},
    {"name": "PRO_num_plur_case_pnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_case_pnom", "symbols": ["PRO_num_plur_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","case":"+nom","gen":["male","fem","-hum"]}, args)},
    {"name": "PRO_num_plur_case_nnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_case_nnom", "symbols": ["PRO_num_plur_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","case":"-nom","gen":["male","fem","-hum"]}, args)},
    {"name": "PN_num_sing$subexpression$1", "symbols": [/[jJ]/, /[oO]/, /[nN]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$2", "symbols": [/[jJ]/, /[oO]/, /[hH]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$3", "symbols": [/[mM]/, /[eE]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$3"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$4", "symbols": [/[lL]/, /[eE]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$4"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$5", "symbols": [/[yY]/, /[uU]/, /[jJ]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$5"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$6", "symbols": [/[sS]/, /[mM]/, /[iI]/, /[tT]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$6"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$7", "symbols": [/[sS]/, /[oO]/, /[cC]/, /[rR]/, /[aA]/, /[tT]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$7"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$8", "symbols": [/[sS]/, /[aA]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$8"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing$subexpression$9", "symbols": [/[mM]/, /[aA]/, /[rR]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$9"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing$subexpression$10", "symbols": [/[dD]/, /[aA]/, /[nN]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$10"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing$subexpression$11", "symbols": [/[aA]/, /[nN]/, /[nN]/, /[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$11"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing$subexpression$12", "symbols": [/[bB]/, /[rR]/, /[aA]/, /[zZ]/, /[iI]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$12"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "PN_num_sing$subexpression$13", "symbols": [/[iI]/, /[tT]/, /[aA]/, /[lL]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$13"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "PN_num_sing$subexpression$14", "symbols": [/[uU]/, /[lL]/, /[yY]/, /[sS]/, /[sS]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing", "symbols": ["PN_num_sing$subexpression$14"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "AUX_num_sing_fin_p$subexpression$1", "symbols": [/[dD]/, /[oO]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "AUX_num_sing_fin_p", "symbols": ["AUX_num_sing_fin_p$subexpression$1"], "postprocess": (args) => node("AUX", {"num":"sing","fin":"+"}, args)},
    {"name": "AUX_num_plur_fin_p$subexpression$1", "symbols": [/[dD]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "AUX_num_plur_fin_p", "symbols": ["AUX_num_plur_fin_p$subexpression$1"], "postprocess": (args) => node("AUX", {"num":"plur","fin":"+"}, args)},
    {"name": "RPRO_num_sing$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_sing", "symbols": ["RPRO_num_sing$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"sing"}, args)},
    {"name": "RPRO_num_sing$subexpression$2", "symbols": [/[wW]/, /[hH]/, /[iI]/, /[cC]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_sing", "symbols": ["RPRO_num_sing$subexpression$2"], "postprocess": (args) => node("RPRO", {"num":"sing"}, args)},
    {"name": "RPRO_num_plur$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_plur", "symbols": ["RPRO_num_plur$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"plur"}, args)},
    {"name": "RPRO_num_plur$subexpression$2", "symbols": [/[wW]/, /[hH]/, /[iI]/, /[cC]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_plur", "symbols": ["RPRO_num_plur$subexpression$2"], "postprocess": (args) => node("RPRO", {"num":"plur"}, args)},
    {"name": "GAP", "symbols": [], "postprocess": (args) => node("GAP", {}, args)},
    {"name": "ADJ$subexpression$1", "symbols": [/[hH]/, /[aA]/, /[pP]/, /[pP]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$1"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$2", "symbols": [/[uU]/, /[nN]/, /[hH]/, /[aA]/, /[pP]/, /[pP]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$2"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$3", "symbols": [/[hH]/, /[aA]/, /[nN]/, /[dD]/, /[sS]/, /[oO]/, /[mM]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$3"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$4", "symbols": [/[bB]/, /[eE]/, /[aA]/, /[uU]/, /[tT]/, /[iI]/, /[fF]/, /[uU]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$4"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$5", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$5"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$6", "symbols": [/[sS]/, /[lL]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$6"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$7", "symbols": [/[mM]/, /[oO]/, /[rR]/, /[tT]/, /[aA]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$7"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$8", "symbols": [/[bB]/, /[rR]/, /[aA]/, /[zZ]/, /[iI]/, /[lL]/, /[iI]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$8"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "BE_num_sing_fin_p$subexpression$1", "symbols": [/[iI]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_sing_fin_p", "symbols": ["BE_num_sing_fin_p$subexpression$1"], "postprocess": (args) => node("BE", {"num":"sing","fin":"+"}, args)},
    {"name": "BE_num_sing_fin_n$subexpression$1", "symbols": [/[iI]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_sing_fin_n", "symbols": ["BE_num_sing_fin_n$subexpression$1"], "postprocess": (args) => node("BE", {"num":"sing","fin":"-"}, args)},
    {"name": "BE_num_plur_fin_p$subexpression$1", "symbols": [/[aA]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_plur_fin_p", "symbols": ["BE_num_plur_fin_p$subexpression$1"], "postprocess": (args) => node("BE", {"num":"plur","fin":"+"}, args)},
    {"name": "BE_num_plur_fin_n$subexpression$1", "symbols": [/[aA]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_plur_fin_n", "symbols": ["BE_num_plur_fin_n$subexpression$1"], "postprocess": (args) => node("BE", {"num":"plur","fin":"-"}, args)},
    {"name": "RN_num_sing$subexpression$1", "symbols": [/[hH]/, /[uU]/, /[sS]/, /[bB]/, /[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$1"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing$subexpression$2", "symbols": [/[fF]/, /[aA]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$2"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing$subexpression$3", "symbols": [/[bB]/, /[rR]/, /[oO]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$3"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing$subexpression$4", "symbols": [/[wW]/, /[iI]/, /[fF]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$4"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "RN_num_sing$subexpression$5", "symbols": [/[mM]/, /[oO]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$5"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "RN_num_sing$subexpression$6", "symbols": [/[sS]/, /[iI]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing", "symbols": ["RN_num_sing$subexpression$6"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PREP$subexpression$1", "symbols": [/[bB]/, /[eE]/, /[hH]/, /[iI]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$1"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$2", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$2"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$3", "symbols": [/[oO]/, /[vV]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$3"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$4", "symbols": [/[uU]/, /[nN]/, /[dD]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$4"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$5", "symbols": [/[nN]/, /[eE]/, /[aA]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$5"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$6", "symbols": [/[bB]/, /[eE]/, /[fF]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$6"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$7", "symbols": [/[aA]/, /[fF]/, /[tT]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$7"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$8", "symbols": [/[dD]/, /[uU]/, /[rR]/, /[iI]/, /[nN]/, /[gG]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$8"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$9", "symbols": [/[fF]/, /[rR]/, /[oO]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$9"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$10", "symbols": [/[tT]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$10"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$11", "symbols": [/[oO]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$11"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$12", "symbols": [/[aA]/, /[bB]/, /[oO]/, /[uU]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$12"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$13", "symbols": [/[bB]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$13"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$14", "symbols": [/[fF]/, /[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$14"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$15", "symbols": [/[wW]/, /[iI]/, /[tT]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$15"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "WS_gap_sing", "symbols": ["_"], "postprocess": () => null},
    {"name": "WS_gap_plur", "symbols": ["_"], "postprocess": () => null},
    {"name": "WS_gap_n", "symbols": ["__"], "postprocess": () => null}
]
  , ParserStart: "Sentence"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
