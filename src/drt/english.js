// Generated automatically by nearley, version 2.13.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

    function node(type, types, children) {
     // console.log(type + ": " + JSON.stringify(types) + " => ");
     return {
      "@type": type, 
       "types": types, 
       "children": children
       .filter(child => child != null)
       .filter(child => child != '.')
       }; 
    }
    var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "Discourse$ebnf$1$subexpression$1", "symbols": ["_", "Sentence", "_"], "postprocess": (args) => args[1]},
    {"name": "Discourse$ebnf$1", "symbols": ["Discourse$ebnf$1$subexpression$1"]},
    {"name": "Discourse$ebnf$1$subexpression$2", "symbols": ["_", "Sentence", "_"], "postprocess": (args) => args[1]},
    {"name": "Discourse$ebnf$1", "symbols": ["Discourse$ebnf$1", "Discourse$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Discourse", "symbols": ["Discourse$ebnf$1"], "postprocess": (args) => node("Discourse", {}, ...args)},
    {"name": "Sentence", "symbols": ["S_num_sing", "_", {"literal":"."}], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence", "symbols": ["S_num_plur", "_", {"literal":"."}], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$2", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$1", "_", "NP_num_sing_gen_male_case_pnom_gap_sing", "__", "VP__num_sing_fin_p_gap_n", "_", "Sentence$subexpression$2"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$3", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$4", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$3", "_", "NP_num_sing_gen_fem_case_pnom_gap_sing", "__", "VP__num_sing_fin_p_gap_n", "_", "Sentence$subexpression$4"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$5", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$6", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$5", "_", "NP_num_sing_gen_nhum_case_pnom_gap_sing", "__", "VP__num_sing_fin_p_gap_n", "_", "Sentence$subexpression$6"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$7", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$8", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$7", "_", "NP_num_plur_gen_male_case_pnom_gap_plur", "__", "VP__num_plur_fin_p_gap_n", "_", "Sentence$subexpression$8"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$9", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$10", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$9", "_", "NP_num_plur_gen_fem_case_pnom_gap_plur", "__", "VP__num_plur_fin_p_gap_n", "_", "Sentence$subexpression$10"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$11", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$12", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$11", "_", "NP_num_plur_gen_nhum_case_pnom_gap_plur", "__", "VP__num_plur_fin_p_gap_n", "_", "Sentence$subexpression$12"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$13", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$14", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$13", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_male_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_sing", "_", "Sentence$subexpression$14"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$15", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$16", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$15", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_male_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_sing", "_", "Sentence$subexpression$16"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$17", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$18", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$17", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_fem_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_sing", "_", "Sentence$subexpression$18"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$19", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$20", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$19", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_fem_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_sing", "_", "Sentence$subexpression$20"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$21", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$22", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$21", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_sing", "_", "Sentence$subexpression$22"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$23", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$24", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$23", "__", "AUX_num_sing_fin_p", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_sing", "_", "Sentence$subexpression$24"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$25", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$26", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$25", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_male_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_plur", "_", "Sentence$subexpression$26"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$27", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$28", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$27", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_male_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_plur", "_", "Sentence$subexpression$28"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$29", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$30", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$29", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_fem_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_plur", "_", "Sentence$subexpression$30"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$31", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$32", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$31", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_fem_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_plur", "_", "Sentence$subexpression$32"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$33", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$34", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$33", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "VP_num_sing_fin_p_gap_plur", "_", "Sentence$subexpression$34"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "Sentence$subexpression$35", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence$subexpression$36", "symbols": [{"literal":"?"}], "postprocess": function(d) {return d.join(""); }},
    {"name": "Sentence", "symbols": ["Sentence$subexpression$35", "__", "AUX_num_sing_fin_p", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "VP_num_plur_fin_p_gap_plur", "_", "Sentence$subexpression$36"], "postprocess": (args) => node("Sentence", {}, args)},
    {"name": "S_num_sing", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$1", "symbols": [/[iI]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing$subexpression$2", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing$subexpression$1", "__", "S_num_sing", "__", "S_num_sing$subexpression$2", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing", "__", "S_num_sing$subexpression$3", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_sing$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_sing", "symbols": ["S_num_sing", "__", "S_num_sing$subexpression$4", "__", "S_num_sing"], "postprocess": (args) => node("S", {"num":"sing"}, args)},
    {"name": "S_num_plur", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$1", "symbols": [/[iI]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur$subexpression$2", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur$subexpression$1", "__", "S_num_plur", "__", "S_num_plur$subexpression$2", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur", "__", "S_num_plur$subexpression$3", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_plur$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "S_num_plur", "symbols": ["S_num_plur", "__", "S_num_plur$subexpression$4", "__", "S_num_plur"], "postprocess": (args) => node("S", {"num":"plur"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_n", "WS_gap_n", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_n", "WS_gap_n", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_n", "WS_gap_n", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_n", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"-"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_sing", "WS_gap_sing", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_sing", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"sing","gap":"sing"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_plur", "WS_gap_plur", "VP__num_sing_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_sing_gap_plur", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_n", "__", "VP__num_sing_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"sing","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_n", "WS_gap_n", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_n", "WS_gap_n", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_n", "WS_gap_n", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_n", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"-"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_sing_gen_male_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_sing_gen_fem_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_sing_gen_nhum_case_pnom_gap_sing", "WS_gap_sing", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_sing", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_sing"], "postprocess": (args) => node("S", {"num":"plur","gap":"sing"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_plur", "WS_gap_plur", "VP__num_plur_fin_p_gap_n"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_male_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_fem_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "S_num_plur_gap_plur", "symbols": ["NP__num_plur_gen_nhum_case_pnom_gap_n", "__", "VP__num_plur_fin_p_gap_plur"], "postprocess": (args) => node("S", {"num":"plur","gap":"plur"}, args)},
    {"name": "VP__num_sing_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_n", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_n$subexpression$1", "__", "VP_num_sing_fin_n_gap_n"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_sing_fin_p_gap_n", "symbols": ["VP_num_sing_fin_p_gap_n"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_sing_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_sing", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_sing$subexpression$1", "__", "VP_num_sing_fin_n_gap_sing"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_sing_fin_p_gap_sing", "symbols": ["VP_num_sing_fin_p_gap_sing"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_sing_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_sing_fin_p_gap_plur", "symbols": ["AUX_num_sing_fin_p", "__", "VP__num_sing_fin_p_gap_plur$subexpression$1", "__", "VP_num_sing_fin_n_gap_plur"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_sing_fin_p_gap_plur", "symbols": ["VP_num_sing_fin_p_gap_plur"], "postprocess": (args) => node("VP'", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_plur_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_n", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_n$subexpression$1", "__", "VP_num_plur_fin_n_gap_n"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_plur_fin_p_gap_n", "symbols": ["VP_num_plur_fin_p_gap_n"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP__num_plur_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_sing", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_sing$subexpression$1", "__", "VP_num_plur_fin_n_gap_sing"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_plur_fin_p_gap_sing", "symbols": ["VP_num_plur_fin_p_gap_sing"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP__num_plur_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP__num_plur_fin_p_gap_plur", "symbols": ["AUX_num_plur_fin_p", "__", "VP__num_plur_fin_p_gap_plur$subexpression$1", "__", "VP_num_plur_fin_n_gap_plur"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP__num_plur_fin_p_gap_plur", "symbols": ["VP_num_plur_fin_p_gap_plur"], "postprocess": (args) => node("VP'", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_male_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_sing", "symbols": ["VP_num_sing_fin_p_gap_sing", "__", "VP_num_sing_fin_p_gap_sing$subexpression$2", "__", "VP_num_sing_fin_p_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_male_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["V_num_sing_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_plur", "symbols": ["VP_num_sing_fin_p_gap_plur", "__", "VP_num_sing_fin_p_gap_plur$subexpression$2", "__", "VP_num_sing_fin_p_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_male_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_sing", "symbols": ["VP_num_sing_fin_n_gap_sing", "__", "VP_num_sing_fin_n_gap_sing$subexpression$2", "__", "VP_num_sing_fin_n_gap_sing"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_male_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["V_num_sing_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_n_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_plur", "symbols": ["VP_num_sing_fin_n_gap_plur", "__", "VP_num_sing_fin_n_gap_plur$subexpression$2", "__", "VP_num_sing_fin_n_gap_plur"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_male_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_sing", "NP__num_sing_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_sing", "symbols": ["VP_num_plur_fin_p_gap_sing", "__", "VP_num_plur_fin_p_gap_sing$subexpression$2", "__", "VP_num_plur_fin_p_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_male_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["V_num_plur_fin_p_trans_p", "WS_gap_plur", "NP__num_plur_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_p_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_plur", "symbols": ["VP_num_plur_fin_p_gap_plur", "__", "VP_num_plur_fin_p_gap_plur$subexpression$2", "__", "VP_num_plur_fin_p_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_male_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_sing", "NP__num_sing_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_sing$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_sing$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_sing", "symbols": ["VP_num_plur_fin_n_gap_sing", "__", "VP_num_plur_fin_n_gap_sing$subexpression$2", "__", "VP_num_plur_fin_n_gap_sing"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"sing"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_male_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["V_num_plur_fin_n_trans_p", "WS_gap_plur", "NP__num_plur_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_plur$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_plur_fin_n_gap_plur$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_plur", "symbols": ["VP_num_plur_fin_n_gap_plur", "__", "VP_num_plur_fin_n_gap_plur$subexpression$2", "__", "VP_num_plur_fin_n_gap_plur"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"plur"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_p", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["V_num_sing_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "VP_num_sing_fin_p_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["BE_num_sing_fin_p", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_p_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_p_gap_n", "symbols": ["VP_num_sing_fin_p_gap_n", "__", "VP_num_sing_fin_p_gap_n$subexpression$2", "__", "VP_num_sing_fin_p_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_p", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["V_num_sing_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "VP_num_sing_fin_n_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["BE_num_sing_fin_n", "__", "DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_sing_fin_n_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_sing_fin_n_gap_n", "symbols": ["VP_num_sing_fin_n_gap_n", "__", "VP_num_sing_fin_n_gap_n$subexpression$2", "__", "VP_num_sing_fin_n_gap_n"], "postprocess": (args) => node("VP", {"num":"sing","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_p", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["V_num_plur_fin_p_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "VP_num_plur_fin_p_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["BE_num_plur_fin_p", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_p_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_p_gap_n", "symbols": ["VP_num_plur_fin_p_gap_n", "__", "VP_num_plur_fin_p_gap_n$subexpression$2", "__", "VP_num_plur_fin_p_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"+","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_p", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["V_num_plur_fin_n_trans_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n$subexpression$1", "symbols": [/[nN]/, /[oO]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "VP_num_plur_fin_n_gap_n$subexpression$1", "__", "ADJ"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["BE_num_plur_fin_n", "__", "DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "VP_num_plur_fin_n_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "VP_num_plur_fin_n_gap_n", "symbols": ["VP_num_plur_fin_n_gap_n", "__", "VP_num_plur_fin_n_gap_n$subexpression$2", "__", "VP_num_plur_fin_n_gap_n"], "postprocess": (args) => node("VP", {"num":"plur","fin":"-","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"sing"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom_gap_sing", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"sing"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"plur"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom_gap_plur", "symbols": ["GAP"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"plur"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom_gap_n", "symbols": ["PN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom_gap_n", "symbols": ["PRO_num_sing_gen_male_case_pnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom_gap_n", "symbols": ["PN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom_gap_n", "symbols": ["PRO_num_sing_gen_male_case_nnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_male_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_male"], "postprocess": (args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom_gap_n", "symbols": ["PN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom_gap_n", "symbols": ["PRO_num_sing_gen_fem_case_pnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom_gap_n", "symbols": ["PN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom_gap_n", "symbols": ["PRO_num_sing_gen_fem_case_nnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_fem_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_fem"], "postprocess": (args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["PN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["PRO_num_sing_gen_nhum_case_pnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["DET_num_sing", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["PN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["PRO_num_sing_gen_nhum_case_nnom"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_sing_gen_nhum"], "postprocess": (args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom_gap_n", "symbols": ["PN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom_gap_n", "symbols": ["PRO_num_plur_gen_male_case_pnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom_gap_n", "symbols": ["PN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom_gap_n", "symbols": ["PRO_num_plur_gen_male_case_nnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_male_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_male"], "postprocess": (args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom_gap_n", "symbols": ["PN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom_gap_n", "symbols": ["PRO_num_plur_gen_fem_case_pnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom_gap_n", "symbols": ["PN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom_gap_n", "symbols": ["PRO_num_plur_gen_fem_case_nnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_fem_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_fem"], "postprocess": (args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["PN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["PRO_num_plur_gen_nhum_case_pnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["DET_num_plur", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["PN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["PRO_num_plur_gen_nhum_case_nnom"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP_num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["DET_num_sing_rn_p", "__", "RN_num_plur_gen_nhum"], "postprocess": (args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_male_case_pnom_gap_n$subexpression$5", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_male_case_nnom_gap_n$subexpression$5", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_fem_case_pnom_gap_n$subexpression$5", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_fem_case_nnom_gap_n$subexpression$5", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$5", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$5", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$6", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$6", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$7", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$7", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$8", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$8", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$9", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$9", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$10", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$10", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$11", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$11", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$12", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$12", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$13", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$13", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$14", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$14", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$15", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$15", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$16", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$16", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$17", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$17", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$18", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$18", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$19", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$19", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$20", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$20", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$21", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$21", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$22", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$22", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$23", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$23", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$24", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$24", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$25", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$25", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$26", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$26", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$27", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$27", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$28", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$28", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$29", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$29", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$30", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$30", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$31", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$31", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$32", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$32", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$33", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$33", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$34", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$34", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$35", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$35", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$36", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$36", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$37", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$37", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$38", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$38", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$39", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$39", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$40", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$40", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$41", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$41", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$42", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$42", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$43", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$43", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$44", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$44", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$45", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$45", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$46", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$46", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$47", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$47", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$48", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$48", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$49", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$49", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$50", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$50", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$51", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$51", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$52", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$52", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$53", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$53", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$54", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$54", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$55", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$55", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$56", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$56", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$57", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$57", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$58", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$58", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$59", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$59", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$60", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$60", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$61", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$61", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$62", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$62", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$63", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$63", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$64", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$64", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$65", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$65", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$66", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$66", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$67", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$67", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$68", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$68", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$69", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$69", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$70", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$70", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$71", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$71", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$72", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$72", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$73", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$73", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$74", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$74", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$75", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$75", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$76", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$76", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$77", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_plur_gen_nhum_case_pnom_gap_n$subexpression$77", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$2", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$2", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$4", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$4", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$5", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$5", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$6", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$6", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$7", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$7", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$8", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$8", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$9", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$9", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$10", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$10", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$11", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$11", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$12", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$12", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$13", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$13", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$14", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$14", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$15", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$15", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$16", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$16", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$17", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$17", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$18", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$18", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$19", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$19", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$20", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$20", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$21", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$21", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$22", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$22", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$23", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$23", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$24", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$24", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$25", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$25", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$26", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$26", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$27", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$27", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$28", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$28", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$29", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$29", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$30", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$30", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$31", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$31", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$32", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$32", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$33", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$33", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$34", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$34", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$35", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$35", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$36", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$36", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$37", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$37", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$38", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$38", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$39", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$39", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$40", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$40", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$41", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$41", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$42", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$42", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$43", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$43", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$44", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$44", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$45", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$45", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$46", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$46", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$47", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$47", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$48", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$48", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$49", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$49", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$50", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$50", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$51", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$51", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$52", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$52", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$53", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$53", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$54", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$54", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$55", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$55", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$56", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$56", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$57", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$57", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$58", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$58", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$59", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$59", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$60", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$60", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$61", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$61", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$62", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$62", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$63", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$63", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$64", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$64", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$65", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$65", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$66", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$66", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$67", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$67", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$68", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$68", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$69", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$69", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$70", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$70", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$71", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$71", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$72", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$72", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$73", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$73", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$74", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$74", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$75", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$75", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$76", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$76", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$77", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_plur_gen_nhum_case_nnom_gap_n$subexpression$77", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_pnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_male_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_male_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_pnom_gap_sing", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_pnom_gap_plur", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_nnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_male_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_male_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_nnom_gap_sing", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_male_case_nnom_gap_plur", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"male","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_pnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_fem_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_fem_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_pnom_gap_sing", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_pnom_gap_plur", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_nnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_fem_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_fem_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_nnom_gap_sing", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_fem_case_nnom_gap_plur", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"fem","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$2", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$4", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$4", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$5", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$6", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$6", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$7", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$7", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$8", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$8", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$9", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$9", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$10", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$10", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$11", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$11", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$12", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$12", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$13", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$13", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$14", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$14", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$15", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$15", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$16", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$16", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$17", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$17", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$18", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$18", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$19", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$19", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$20", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$20", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$21", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$21", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$22", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$22", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$23", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$23", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$24", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$24", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$25", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$25", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$26", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$26", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$27", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$27", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$28", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$28", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$29", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$29", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$30", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$30", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$31", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$31", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$32", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$32", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$33", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$33", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$34", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$34", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$35", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$35", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$36", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$36", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$37", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_n", "__", "NP__num_sing_gen_nhum_case_pnom_gap_n$subexpression$37", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_sing", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_pnom_gap_plur", "symbols": ["NP_num_sing_gen_nhum_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$1", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$1", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$2", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$2", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$3", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$3", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$4", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$4", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$5", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$5", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$6", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$6", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$7", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$7", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$8", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$8", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$9", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$9", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$10", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$10", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$11", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$11", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$12", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$12", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$13", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$13", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$14", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$14", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$15", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$15", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$16", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$16", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$17", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$17", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$18", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$18", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$19", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$19", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$20", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$20", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$21", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$21", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$22", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$22", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$23", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$23", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$24", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$24", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$25", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$25", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$26", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$26", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$27", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$27", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$28", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$28", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$29", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$29", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$30", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$30", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$31", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$31", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$32", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$32", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$33", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$33", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$34", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$34", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$35", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$35", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$36", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$36", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$37", "symbols": [/[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_n", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_n", "__", "NP__num_sing_gen_nhum_case_nnom_gap_n$subexpression$37", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"-"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_sing", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_sing_gen_nhum_case_nnom_gap_plur", "symbols": ["NP_num_sing_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"sing","gen":"-hum","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_sing", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_pnom_gap_plur", "symbols": ["NP_num_plur_gen_male_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_sing", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_male_case_nnom_gap_plur", "symbols": ["NP_num_plur_gen_male_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"male","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_sing", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_pnom_gap_plur", "symbols": ["NP_num_plur_gen_fem_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_sing", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_fem_case_nnom_gap_plur", "symbols": ["NP_num_plur_gen_fem_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"fem","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_sing", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_pnom_gap_plur", "symbols": ["NP_num_plur_gen_nhum_case_pnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"+nom","gap":"plur"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_sing", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_sing"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"sing"}, args))(args)},
    {"name": "NP__num_plur_gen_nhum_case_nnom_gap_plur", "symbols": ["NP_num_plur_gen_nhum_case_nnom_gap_plur"], "postprocess": (args) => args.length == 1 ? args[0] : ((args) => node("NP", {"num":"plur","gen":"-hum","case":"-nom","gap":"plur"}, args))(args)},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male", "__", "RC_num_sing_gen_male"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_male", "symbols": ["ADJ", "__", "N_num_sing_gen_male"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male", "__", "PP"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_male$subexpression$1", "symbols": [/[sS]/, /[tT]/, /[oO]/, /[cC]/, /[kK]/, /[bB]/, /[rR]/, /[oO]/, /[kK]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male$subexpression$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_male$subexpression$2", "symbols": [/[mM]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_male", "symbols": ["N_num_sing_gen_male$subexpression$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"male"}, args)},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem", "__", "RC_num_sing_gen_fem"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem", "symbols": ["ADJ", "__", "N_num_sing_gen_fem"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem", "__", "PP"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem$subexpression$1", "symbols": [/[sS]/, /[tT]/, /[oO]/, /[cC]/, /[kK]/, /[bB]/, /[rR]/, /[oO]/, /[kK]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$subexpression$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem$subexpression$2", "symbols": [/[wW]/, /[oO]/, /[mM]/, /[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$subexpression$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_fem$subexpression$3", "symbols": [/[wW]/, /[iI]/, /[dD]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_fem", "symbols": ["N_num_sing_gen_fem$subexpression$3"], "postprocess": (args) => node("N", {"num":"sing","gen":"fem"}, args)},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum", "__", "RC_num_sing_gen_nhum"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum", "symbols": ["ADJ", "__", "N_num_sing_gen_nhum"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum", "__", "PP"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$subexpression$1", "symbols": [/[bB]/, /[oO]/, /[oO]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$subexpression$1"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$subexpression$2", "symbols": [/[dD]/, /[oO]/, /[nN]/, /[kK]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$subexpression$2"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$subexpression$3", "symbols": [/[hH]/, /[oO]/, /[rR]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$subexpression$3"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_sing_gen_nhum$subexpression$4", "symbols": [/[pP]/, /[oO]/, /[rR]/, /[sS]/, /[cC]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "N_num_sing_gen_nhum", "symbols": ["N_num_sing_gen_nhum$subexpression$4"], "postprocess": (args) => node("N", {"num":"sing","gen":"-hum"}, args)},
    {"name": "N_num_plur_gen_male", "symbols": ["N_num_plur_gen_male", "__", "RC_num_plur_gen_male"], "postprocess": (args) => node("N", {"num":"plur","gen":"male"}, args)},
    {"name": "N_num_plur_gen_male", "symbols": ["ADJ", "__", "N_num_plur_gen_male"], "postprocess": (args) => node("N", {"num":"plur","gen":"male"}, args)},
    {"name": "N_num_plur_gen_male", "symbols": ["N_num_plur_gen_male", "__", "PP"], "postprocess": (args) => node("N", {"num":"plur","gen":"male"}, args)},
    {"name": "N_num_plur_gen_fem", "symbols": ["N_num_plur_gen_fem", "__", "RC_num_plur_gen_fem"], "postprocess": (args) => node("N", {"num":"plur","gen":"fem"}, args)},
    {"name": "N_num_plur_gen_fem", "symbols": ["ADJ", "__", "N_num_plur_gen_fem"], "postprocess": (args) => node("N", {"num":"plur","gen":"fem"}, args)},
    {"name": "N_num_plur_gen_fem", "symbols": ["N_num_plur_gen_fem", "__", "PP"], "postprocess": (args) => node("N", {"num":"plur","gen":"fem"}, args)},
    {"name": "N_num_plur_gen_nhum", "symbols": ["N_num_plur_gen_nhum", "__", "RC_num_plur_gen_nhum"], "postprocess": (args) => node("N", {"num":"plur","gen":"-hum"}, args)},
    {"name": "N_num_plur_gen_nhum", "symbols": ["ADJ", "__", "N_num_plur_gen_nhum"], "postprocess": (args) => node("N", {"num":"plur","gen":"-hum"}, args)},
    {"name": "N_num_plur_gen_nhum", "symbols": ["N_num_plur_gen_nhum", "__", "PP"], "postprocess": (args) => node("N", {"num":"plur","gen":"-hum"}, args)},
    {"name": "RC_num_sing_gen_male", "symbols": ["RPRO_num_sing_gen_male", "__", "S_num_sing_gap_sing"], "postprocess": (args) => node("RC", {"num":"sing","gen":"male"}, args)},
    {"name": "RC_num_sing_gen_fem", "symbols": ["RPRO_num_sing_gen_fem", "__", "S_num_sing_gap_sing"], "postprocess": (args) => node("RC", {"num":"sing","gen":"fem"}, args)},
    {"name": "RC_num_sing_gen_nhum", "symbols": ["RPRO_num_sing_gen_nhum", "__", "S_num_sing_gap_sing"], "postprocess": (args) => node("RC", {"num":"sing","gen":"-hum"}, args)},
    {"name": "RC_num_plur_gen_male", "symbols": ["RPRO_num_plur_gen_male", "__", "S_num_plur_gap_plur"], "postprocess": (args) => node("RC", {"num":"plur","gen":"male"}, args)},
    {"name": "RC_num_plur_gen_fem", "symbols": ["RPRO_num_plur_gen_fem", "__", "S_num_plur_gap_plur"], "postprocess": (args) => node("RC", {"num":"plur","gen":"fem"}, args)},
    {"name": "RC_num_plur_gen_nhum", "symbols": ["RPRO_num_plur_gen_nhum", "__", "S_num_plur_gap_plur"], "postprocess": (args) => node("RC", {"num":"plur","gen":"-hum"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p", "__", "V_num_sing_fin_p_trans_p$subexpression$1", "__", "V_num_sing_fin_p_trans_p"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_p", "symbols": ["V_num_sing_fin_p_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"+"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n", "__", "V_num_sing_fin_p_trans_n$subexpression$1", "__", "V_num_sing_fin_p_trans_n"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_p_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_p_trans_n", "symbols": ["V_num_sing_fin_p_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"+","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p", "__", "V_num_sing_fin_n_trans_p$subexpression$1", "__", "V_num_sing_fin_n_trans_p"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_p", "symbols": ["V_num_sing_fin_n_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"+"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n", "__", "V_num_sing_fin_n_trans_n$subexpression$1", "__", "V_num_sing_fin_n_trans_n"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_sing_fin_n_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_sing_fin_n_trans_n", "symbols": ["V_num_sing_fin_n_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"sing","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p", "__", "V_num_plur_fin_p_trans_p$subexpression$1", "__", "V_num_plur_fin_p_trans_p"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_p", "symbols": ["V_num_plur_fin_p_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"+"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n", "__", "V_num_plur_fin_p_trans_n$subexpression$1", "__", "V_num_plur_fin_p_trans_n"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_p_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_p_trans_n", "symbols": ["V_num_plur_fin_p_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"+","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p", "__", "V_num_plur_fin_n_trans_p$subexpression$1", "__", "V_num_plur_fin_n_trans_p"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$2", "symbols": [/[lL]/, /[iI]/, /[kK]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$3", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[mM]/, /[iI]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$5", "symbols": [/[kK]/, /[nN]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$5"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$6", "symbols": [/[oO]/, /[wW]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$6"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$7", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[cC]/, /[iI]/, /[nN]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$7"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$8", "symbols": [/[rR]/, /[oO]/, /[tT]/, /[aA]/, /[tT]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$8"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_p$subexpression$9", "symbols": [/[sS]/, /[uU]/, /[rR]/, /[pP]/, /[rR]/, /[iI]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_p", "symbols": ["V_num_plur_fin_n_trans_p$subexpression$9"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"+"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$1", "symbols": [/[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n", "__", "V_num_plur_fin_n_trans_n$subexpression$1", "__", "V_num_plur_fin_n_trans_n"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$2", "symbols": [/[lL]/, /[oO]/, /[vV]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$2"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$3", "symbols": [/[sS]/, /[tT]/, /[iI]/, /[nN]/, /[kK]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$3"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "V_num_plur_fin_n_trans_n$subexpression$4", "symbols": [/[aA]/, /[dD]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "V_num_plur_fin_n_trans_n", "symbols": ["V_num_plur_fin_n_trans_n$subexpression$4"], "postprocess": (args) => node("V", {"num":"plur","fin":"-","trans":"-"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$1", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_sing_gen_male", "DET_num_sing_rn_p$subexpression$1"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$2", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_sing_gen_fem", "DET_num_sing_rn_p$subexpression$2"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$3", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_sing_gen_nhum", "DET_num_sing_rn_p$subexpression$3"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$4", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_plur_gen_male", "DET_num_sing_rn_p$subexpression$4"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$5", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_plur_gen_fem", "DET_num_sing_rn_p$subexpression$5"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "DET_num_sing_rn_p$subexpression$6", "symbols": [{"literal":"'"}, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing_rn_p", "symbols": ["PN_num_plur_gen_nhum", "DET_num_sing_rn_p$subexpression$6"], "postprocess": (args) => node("DET", {"num":"sing","rn":"+"}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_male_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_fem_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_sing_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_male_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_male_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_fem_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_fem_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_nhum_case_pnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "PP", "symbols": ["PREP", "__", "NP_num_plur_gen_nhum_case_nnom_gap_n"], "postprocess": (args) => node("PP", {}, args)},
    {"name": "DET_num_sing$subexpression$1", "symbols": [/[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$1"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$2", "symbols": [/[aA]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$2"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$3", "symbols": [/[eE]/, /[vV]/, /[eE]/, /[rR]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$3"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$4", "symbols": [/[tT]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$4"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "DET_num_sing$subexpression$5", "symbols": [/[sS]/, /[oO]/, /[mM]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "DET_num_sing", "symbols": ["DET_num_sing$subexpression$5"], "postprocess": (args) => node("DET", {"num":"sing"}, args)},
    {"name": "PRO_num_sing_gen_male_case_pnom$subexpression$1", "symbols": [/[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_male_case_pnom", "symbols": ["PRO_num_sing_gen_male_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"male","case":"+nom"}, args)},
    {"name": "PRO_num_sing_gen_male_case_nnom$subexpression$1", "symbols": [/[hH]/, /[iI]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_male_case_nnom", "symbols": ["PRO_num_sing_gen_male_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"male","case":"-nom"}, args)},
    {"name": "PRO_num_sing_gen_fem_case_pnom$subexpression$1", "symbols": [/[sS]/, /[hH]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_fem_case_pnom", "symbols": ["PRO_num_sing_gen_fem_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"fem","case":"+nom"}, args)},
    {"name": "PRO_num_sing_gen_fem_case_nnom$subexpression$1", "symbols": [/[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_fem_case_nnom", "symbols": ["PRO_num_sing_gen_fem_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"fem","case":"-nom"}, args)},
    {"name": "PRO_num_sing_gen_nhum_case_nnom$subexpression$1", "symbols": [/[iI]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_nhum_case_nnom", "symbols": ["PRO_num_sing_gen_nhum_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"-hum","case":"-nom"}, args)},
    {"name": "PRO_num_sing_gen_nhum_case_pnom$subexpression$1", "symbols": [/[iI]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_sing_gen_nhum_case_pnom", "symbols": ["PRO_num_sing_gen_nhum_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"sing","gen":"-hum","case":"+nom"}, args)},
    {"name": "PRO_num_plur_gen_male_case_pnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_male_case_pnom", "symbols": ["PRO_num_plur_gen_male_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"male","case":"+nom"}, args)},
    {"name": "PRO_num_plur_gen_fem_case_pnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_fem_case_pnom", "symbols": ["PRO_num_plur_gen_fem_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"fem","case":"+nom"}, args)},
    {"name": "PRO_num_plur_gen_nhum_case_pnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_nhum_case_pnom", "symbols": ["PRO_num_plur_gen_nhum_case_pnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"-hum","case":"+nom"}, args)},
    {"name": "PRO_num_plur_gen_male_case_nnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_male_case_nnom", "symbols": ["PRO_num_plur_gen_male_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"male","case":"-nom"}, args)},
    {"name": "PRO_num_plur_gen_fem_case_nnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_fem_case_nnom", "symbols": ["PRO_num_plur_gen_fem_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"fem","case":"-nom"}, args)},
    {"name": "PRO_num_plur_gen_nhum_case_nnom$subexpression$1", "symbols": [/[tT]/, /[hH]/, /[eE]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PRO_num_plur_gen_nhum_case_nnom", "symbols": ["PRO_num_plur_gen_nhum_case_nnom$subexpression$1"], "postprocess": (args) => node("PRO", {"num":"plur","gen":"-hum","case":"-nom"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$1", "symbols": [/[jJ]/, /[oO]/, /[nN]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$2", "symbols": [/[jJ]/, /[oO]/, /[hH]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$3", "symbols": [/[mM]/, /[eE]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$3"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$4", "symbols": [/[lL]/, /[eE]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$4"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$5", "symbols": [/[yY]/, /[uU]/, /[jJ]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$5"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_male$subexpression$6", "symbols": [/[sS]/, /[mM]/, /[iI]/, /[tT]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_male", "symbols": ["PN_num_sing_gen_male$subexpression$6"], "postprocess": (args) => node("PN", {"num":"sing","gen":"male"}, args)},
    {"name": "PN_num_sing_gen_fem$subexpression$1", "symbols": [/[mM]/, /[aA]/, /[rR]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_fem", "symbols": ["PN_num_sing_gen_fem$subexpression$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing_gen_fem$subexpression$2", "symbols": [/[dD]/, /[aA]/, /[nN]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_fem", "symbols": ["PN_num_sing_gen_fem$subexpression$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing_gen_fem$subexpression$3", "symbols": [/[aA]/, /[nN]/, /[nN]/, /[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_fem", "symbols": ["PN_num_sing_gen_fem$subexpression$3"], "postprocess": (args) => node("PN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PN_num_sing_gen_nhum$subexpression$1", "symbols": [/[bB]/, /[rR]/, /[aA]/, /[zZ]/, /[iI]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_nhum", "symbols": ["PN_num_sing_gen_nhum$subexpression$1"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "PN_num_sing_gen_nhum$subexpression$2", "symbols": [/[iI]/, /[tT]/, /[aA]/, /[lL]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_nhum", "symbols": ["PN_num_sing_gen_nhum$subexpression$2"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "PN_num_sing_gen_nhum$subexpression$3", "symbols": [/[uU]/, /[lL]/, /[yY]/, /[sS]/, /[sS]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PN_num_sing_gen_nhum", "symbols": ["PN_num_sing_gen_nhum$subexpression$3"], "postprocess": (args) => node("PN", {"num":"sing","gen":"-hum"}, args)},
    {"name": "AUX_num_sing_fin_p$subexpression$1", "symbols": [/[dD]/, /[oO]/, /[eE]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "AUX_num_sing_fin_p", "symbols": ["AUX_num_sing_fin_p$subexpression$1"], "postprocess": (args) => node("AUX", {"num":"sing","fin":"+"}, args)},
    {"name": "AUX_num_plur_fin_p$subexpression$1", "symbols": [/[dD]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "AUX_num_plur_fin_p", "symbols": ["AUX_num_plur_fin_p$subexpression$1"], "postprocess": (args) => node("AUX", {"num":"plur","fin":"+"}, args)},
    {"name": "RPRO_num_sing_gen_male$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_sing_gen_male", "symbols": ["RPRO_num_sing_gen_male$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"sing","gen":"male"}, args)},
    {"name": "RPRO_num_sing_gen_fem$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_sing_gen_fem", "symbols": ["RPRO_num_sing_gen_fem$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"sing","gen":"fem"}, args)},
    {"name": "RPRO_num_plur_gen_male$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_plur_gen_male", "symbols": ["RPRO_num_plur_gen_male$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"plur","gen":"male"}, args)},
    {"name": "RPRO_num_plur_gen_fem$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_plur_gen_fem", "symbols": ["RPRO_num_plur_gen_fem$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"plur","gen":"fem"}, args)},
    {"name": "RPRO_num_sing_gen_nhum$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[iI]/, /[cC]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_sing_gen_nhum", "symbols": ["RPRO_num_sing_gen_nhum$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"sing","gen":"-hum"}, args)},
    {"name": "RPRO_num_plur_gen_nhum$subexpression$1", "symbols": [/[wW]/, /[hH]/, /[iI]/, /[cC]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RPRO_num_plur_gen_nhum", "symbols": ["RPRO_num_plur_gen_nhum$subexpression$1"], "postprocess": (args) => node("RPRO", {"num":"plur","gen":"-hum"}, args)},
    {"name": "GAP", "symbols": [], "postprocess": (args) => node("GAP", {}, args)},
    {"name": "ADJ$subexpression$1", "symbols": [/[hH]/, /[aA]/, /[pP]/, /[pP]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$1"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$2", "symbols": [/[uU]/, /[nN]/, /[hH]/, /[aA]/, /[pP]/, /[pP]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$2"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$3", "symbols": [/[hH]/, /[aA]/, /[nN]/, /[dD]/, /[sS]/, /[oO]/, /[mM]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$3"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$4", "symbols": [/[bB]/, /[eE]/, /[aA]/, /[uU]/, /[tT]/, /[iI]/, /[fF]/, /[uU]/, /[lL]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$4"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$5", "symbols": [/[fF]/, /[aA]/, /[sS]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$5"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "ADJ$subexpression$6", "symbols": [/[sS]/, /[lL]/, /[oO]/, /[wW]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ADJ", "symbols": ["ADJ$subexpression$6"], "postprocess": (args) => node("ADJ", {}, args)},
    {"name": "BE_num_sing_fin_p$subexpression$1", "symbols": [/[iI]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_sing_fin_p", "symbols": ["BE_num_sing_fin_p$subexpression$1"], "postprocess": (args) => node("BE", {"num":"sing","fin":"+"}, args)},
    {"name": "BE_num_sing_fin_n$subexpression$1", "symbols": [/[iI]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_sing_fin_n", "symbols": ["BE_num_sing_fin_n$subexpression$1"], "postprocess": (args) => node("BE", {"num":"sing","fin":"-"}, args)},
    {"name": "BE_num_plur_fin_p$subexpression$1", "symbols": [/[aA]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_plur_fin_p", "symbols": ["BE_num_plur_fin_p$subexpression$1"], "postprocess": (args) => node("BE", {"num":"plur","fin":"+"}, args)},
    {"name": "BE_num_plur_fin_n$subexpression$1", "symbols": [/[aA]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BE_num_plur_fin_n", "symbols": ["BE_num_plur_fin_n$subexpression$1"], "postprocess": (args) => node("BE", {"num":"plur","fin":"-"}, args)},
    {"name": "RN_num_sing_gen_male$subexpression$1", "symbols": [/[hH]/, /[uU]/, /[sS]/, /[bB]/, /[aA]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_male", "symbols": ["RN_num_sing_gen_male$subexpression$1"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing_gen_male$subexpression$2", "symbols": [/[fF]/, /[aA]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_male", "symbols": ["RN_num_sing_gen_male$subexpression$2"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing_gen_male$subexpression$3", "symbols": [/[bB]/, /[rR]/, /[oO]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_male", "symbols": ["RN_num_sing_gen_male$subexpression$3"], "postprocess": (args) => node("RN", {"num":"sing","gen":"male"}, args)},
    {"name": "RN_num_sing_gen_fem$subexpression$1", "symbols": [/[wW]/, /[iI]/, /[fF]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_fem", "symbols": ["RN_num_sing_gen_fem$subexpression$1"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "RN_num_sing_gen_fem$subexpression$2", "symbols": [/[mM]/, /[oO]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_fem", "symbols": ["RN_num_sing_gen_fem$subexpression$2"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "RN_num_sing_gen_fem$subexpression$3", "symbols": [/[sS]/, /[iI]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "RN_num_sing_gen_fem", "symbols": ["RN_num_sing_gen_fem$subexpression$3"], "postprocess": (args) => node("RN", {"num":"sing","gen":"fem"}, args)},
    {"name": "PREP$subexpression$1", "symbols": [/[bB]/, /[eE]/, /[hH]/, /[iI]/, /[nN]/, /[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$1"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$2", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$2"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$3", "symbols": [/[oO]/, /[vV]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$3"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$4", "symbols": [/[uU]/, /[nN]/, /[dD]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$4"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$5", "symbols": [/[nN]/, /[eE]/, /[aA]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$5"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$6", "symbols": [/[bB]/, /[eE]/, /[fF]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$6"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$7", "symbols": [/[aA]/, /[fF]/, /[tT]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$7"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$8", "symbols": [/[dD]/, /[uU]/, /[rR]/, /[iI]/, /[nN]/, /[gG]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$8"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$9", "symbols": [/[fF]/, /[rR]/, /[oO]/, /[mM]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$9"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$10", "symbols": [/[tT]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$10"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$11", "symbols": [/[oO]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$11"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$12", "symbols": [/[aA]/, /[bB]/, /[oO]/, /[uU]/, /[tT]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$12"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$13", "symbols": [/[bB]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$13"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$14", "symbols": [/[fF]/, /[oO]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$14"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "PREP$subexpression$15", "symbols": [/[wW]/, /[iI]/, /[tT]/, /[hH]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "PREP", "symbols": ["PREP$subexpression$15"], "postprocess": (args) => node("PREP", {}, args)},
    {"name": "WS_gap_sing", "symbols": ["_"], "postprocess": () => null},
    {"name": "WS_gap_plur", "symbols": ["_"], "postprocess": () => null},
    {"name": "WS_gap_n", "symbols": ["__"], "postprocess": () => null}
]
  , ParserStart: "Discourse"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
